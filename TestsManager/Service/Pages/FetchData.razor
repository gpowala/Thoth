@page "/fetchdata"
@using Service.Data
@using Service.Recording;
@using Service.Recording.RecordedEvents;
@inject IRecordingService Recording;

<PageTitle>Create New Test</PageTitle>

<h1>Create New Test</h1>



@if (session == null)
{
    <div class="recording-session-status"><code>Preparing session...</code></div>
}
else
{
    <div class="recording-session-status">
        <code>server url: http://localhost:5072</code><br />
        <code>session id: @session?.Guid</code><br />

    @if ((session?.IsRecording ?? false) == false)
    {
            <code>session status: not connected</code>
    }
    else
    {
            <code>session status: connected</code>
    }
    </div>

    @foreach (var recordedEvent in session?.RecordedEvents ?? new())
    {
        <div>
            @if (recordedEvent is ClickEvent)
            {
                <p>Timestamp: @((recordedEvent as ClickEvent)?.Timestamp)</p>
                <p>Click coordinates: [@((recordedEvent as ClickEvent)?.X);@((recordedEvent as ClickEvent)?.Y)]</p>
                <p>Click view:<br /><img class="recording-click-view" src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(((recordedEvent as ClickEvent)?.ClickViewFilepath)))"></p>
            }
        </div>
    }
}


@code {
    private RecordingSession? session;

    protected override async Task OnInitializedAsync()
    {
        session = Recording.CreateSession();
        session.SessionStateChanged += OnRecordingSessionStateChanged;
    }

    private void OnRecordingSessionStateChanged(object? sender, EventArgs e)
    {
        this.InvokeAsync(StateHasChanged);
    }
}
