@page "/fetchdata"
@using Service.Data
@using Service.Recording;
@using Service.Recording.RecordedEvents;
@inject IRecordingService Recording;

<PageTitle>Create New Test</PageTitle>

<h2>Tests</h2>

@if (session == null)
{
    <div class="recording-session-status"><code>Preparing session...</code></div>
}
else
{
    <RecordingConnectionStatus ConnectionString=@session?.GetConnectionString() IsRecording=@session?.IsRecording></RecordingConnectionStatus>
    @* <div class="recording-session-status">
        <code>server url: http://localhost:5072</code><br />
        <code>session id: @session?.Guid</code><br /> *@

    @* @if ((session?.IsRecording ?? false) == false)
    {
            <code>session status: not connected</code>
    }
    else
    {
            <code>session status: connected</code>
    }
    </div> *@
    
    @foreach (var recordedEvent in session?.GetRecordedEvents() ?? new())
    {
        <div>
            @if (recordedEvent is ClickEvent)
            {
                <div class="card">
                    <div class="card-header">
                        ClickEvent
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">Id: @((recordedEvent as ClickEvent)?.Id)</div>
                            <div class="col">Timestamp: @((recordedEvent as ClickEvent)?.Timestamp)</div>
                            <div class="col">Coords: [@((recordedEvent as ClickEvent)?.X);@((recordedEvent as ClickEvent)?.Y)]</div>
                        </div>
                        <img class="recording-click-view" src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(((recordedEvent as ClickEvent)?.ClickViewFilepath)))">
                        @* <a href="#" class="btn btn-primary">Go somewhere</a> *@
                    </div>
                </div>
            }

            @if (recordedEvent is AreaSelectEvent)
            {
                <div class="card">
                    <div class="card-header">
                        AreaSelectEvent
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">Id: @((recordedEvent as AreaSelectEvent)?.Id)</div>
                            <div class="col">Timestamp: @((recordedEvent as AreaSelectEvent)?.Timestamp)</div>
                            <div class="col">Rect: [@((recordedEvent as AreaSelectEvent)?.Top);@((recordedEvent as AreaSelectEvent)?.Bottom);@((recordedEvent as AreaSelectEvent)?.Left);@((recordedEvent as AreaSelectEvent)?.Right)]</div>
                            <img class="recording-click-view" src="data:image/gif;base64,@Convert.ToBase64String(File.ReadAllBytes(((recordedEvent as AreaSelectEvent)?.AreaSelectViewFilepath)))">
                        </div>
                    </div>
                </div>
            }

            @if (recordedEvent is KeypressEvent)
            {
                <div class="card">
                    <div class="card-header">
                        KeypressEvent
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">Id: @((recordedEvent as KeypressEvent)?.Id)</div>
                            <div class="col">Timestamp: @((recordedEvent as KeypressEvent)?.Timestamp)</div>
                            <div class="col">Keys: @((recordedEvent as KeypressEvent)?.Keys)</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}


@code {
    private RecordingSession? session;

    protected override async Task OnInitializedAsync()
    {
        session = Recording.CreateSession();
        session.SessionStateChanged += OnRecordingSessionStateChanged;
    }

    private void OnRecordingSessionStateChanged(object? sender, EventArgs e)
    {
        this.InvokeAsync(StateHasChanged);
    }
}
